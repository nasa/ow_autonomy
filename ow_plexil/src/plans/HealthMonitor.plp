// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// This plan is a simple prototype for a rudimentary health monitor
// for the lander.  It monitors the fault dependencies of each
// subsystem. When a subsystem becomes inoperable, it prints out a
// message with the status and cause.  Other plans are intended to use
// the HealthMonitor with the InOut Boolean variables that are updated
// every second. This is intended to make monitoring faults easier and
// less verbose in new plans.

// NOTE: this plan requires use of the Fault Dependencies framework,
// which is documented in OceanWATERS user guide at
// https://github.com/nasa/ow_simulator/wiki/Autonomy.  In particular
// you must start the executive with the fault_dependencies_file
// option, e.g:
//
//   roslaunch ow_plexil ow_exec.launch fault_dependencies_file:="FaultDependenciesModel.xml"

#include "ow-interface.h"

HealthMonitor:
{
  InOut Boolean AllOperable = true;
  InOut Boolean ArmOperable = true;
  InOut Boolean AntennaOperable = true;
  InOut Boolean CameraOperable = true;
  InOut Boolean PowerOperable = true;

  // For simplicity, we initializing these flags true to be sure we
  // get 'inoperable' messages for any systems that are inoperable,
  // even though they may have already been inoperable.
  Boolean ArmPreviouslyWorking = true;
  Boolean AntennaPreviouslyWorking = true;
  Boolean CameraPreviouslyWorking = true;
  Boolean PowerPreviouslyWorking = true;

  LookupLoop:
  {
    Repeat true;
    Wait 1;

    ArmOperable = Lookup(IsOperable("Arm"));
    AntennaOperable = Lookup(IsOperable("Antenna"));
    CameraOperable = Lookup(IsOperable("Camera"));
    PowerOperable = Lookup(IsOperable("Power"));

    AllOperable = ArmOperable &&
                  AntennaOperable &&
                  CameraOperable &&
                  PowerOperable;

    if !ArmOperable && ArmPreviouslyWorking {
      if Lookup(IsFaulty("Arm")) {
        log_warning("Health Monitor: Arm is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Arm")));
      }
      else {
        log_warning("Health Monitor: Arm is Inoperable due to non-local fault(s).");
      }
      endif;
      ArmPreviouslyWorking = false;
    }
    elseif ArmOperable && !ArmPreviouslyWorking {
      log_warning("Health Monitor: Arm is now operable.");
      ArmPreviouslyWorking = true;
    }
    endif;

    if !AntennaOperable && AntennaPreviouslyWorking {
      if Lookup(IsFaulty("Antenna")) {
        log_warning("Health Monitor: Antenna is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Antenna")));
      }
      else {
        log_warning("Health Monitor: Antenna is Inoperable due to non-local fault(s).");
      }
      endif;
      AntennaPreviouslyWorking = false;
    }
    elseif AntennaOperable && !AntennaPreviouslyWorking {
      log_warning("Health Monitor: Antenna is now operable.");
      AntennaPreviouslyWorking = true;
    }
    endif;

    if !CameraOperable && CameraPreviouslyWorking {
      if Lookup(IsFaulty("Camera")) {
        log_warning("Health Monitor: Camera is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Camera")));
      }
      else {
        log_warning("Health Monitor: Camera is Inoperable due to non-local fault(s).");
      }
      endif;
      CameraPreviouslyWorking = false;
    }
    elseif CameraOperable && !CameraPreviouslyWorking {
      log_warning("Health Monitor: Camera is now operable.");
      CameraPreviouslyWorking = true;
    }
    endif;

    if !PowerOperable && PowerPreviouslyWorking {
      if Lookup(IsFaulty("Power")) {
        log_warning("Health Monitor: Power is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Power")));
      }
      else {
        log_warning("Health Monitor: Power is Inoperable due to non-local fault(s).");
      }
      endif;
      PowerPreviouslyWorking = false;
    }
    elseif PowerOperable && !PowerPreviouslyWorking {
      log_warning("Health Monitor: Power is now operable.");
      PowerPreviouslyWorking = true;
    }
    endif;
  }
}
