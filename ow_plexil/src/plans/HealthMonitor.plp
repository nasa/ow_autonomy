// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// This plan monitors the fault dependencies of each subsystem. When a
// subsystem becomes inoperable, it prints out a message with the
// status and cause.  Other plans are intended to use the
// HealthMonitor with the InOut Boolean variables that are updated
// every second. This is intended to make monitoring faults easier
// and less verbose in new plans.

// NOTE: this plan requires use of the Fault Dependencies framework,
// which is documented in OceanWATERS user guide at
// https://github.com/nasa/ow_simulator/wiki/Autonomy. In particular
// you must start the executive with a fault dependencies file, e.g.
//
//   roslaunch ow_plexil ow_exec.launch fault_dependencies_file:="FaultDependenciesModel.xml"

// Also note that this plan is a preliminary example and could be
// improved by using a reactive (condition-driven) style rather than
// polling in a continuous loop.

#include "ow-interface.h"

HealthMonitor:
{
  InOut Boolean AllOperable = true;
  InOut Boolean ArmOperable = true;
  InOut Boolean AntennaOperable = true;
  InOut Boolean CameraOperable = true;
  InOut Boolean PowerOperable = true;

  Boolean PrevArm = true;
  Boolean PrevAntenna = true;
  Boolean PrevCamera = true;
  Boolean PrevPower = true;

  LookupLoop:
  {
    Repeat true;
    Wait 1;

    ArmOperable = Lookup(IsOperable("Arm"));
    AntennaOperable = Lookup(IsOperable("Antenna"));
    CameraOperable = Lookup(IsOperable("Camera"));
    PowerOperable = Lookup(IsOperable("Power"));

    AllOperable = ArmOperable &&
                  AntennaOperable &&
                  CameraOperable &&
                  PowerOperable;

    if !ArmOperable && PrevArm {
      if Lookup(IsFaulty("Arm")) {
        log_warning("Health Monitor: Arm is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Arm")));
      }
      else {
        log_warning("Health Monitor: Arm is Inoperable due to non-local fault(s).");
      }
      PrevArm = false;
    }
    else if ArmOperable && !PrevArm {
      log_warning("Health Monitor: Arm is now operable.");
      PrevArm = true;
    }
    endif;
    
    if !AntennaOperable && PrevAntenna {
      if Lookup(IsFaulty("Antenna")) {
        log_warning("Health Monitor: Antenna is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Antenna")));
      }
      else {
        log_warning("Health Monitor: Antenna is Inoperable due to non-local fault(s).");
      }
      PrevAntenna = false;
    }
    else if AntennaOperable && !PrevAntenna {
      log_warning("Health Monitor: Antenna is now operable.");
      PrevAntenna = true;
    }
    endif;

    if !CameraOperable && PrevCamera {
      if Lookup(IsFaulty("Camera")) {
        log_warning("Health Monitor: Camera is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Camera")));
      }
      else {
        log_warning("Health Monitor: Camera is Inoperable due to non-local fault(s).");
      }
      endif;
      PrevCamera = false;
    }
    else if CameraOperable && !PrevCamera {
      log_warning("Health Monitor: Camera is now operable.");
      PrevCamera = true;
    }
    endif;
    
    if !PowerOperable && PrevPower {
      if Lookup(IsFaulty("Power")) {
        log_warning("Health Monitor: Power is Inoperable due to the local fault(s): ",
                    Lookup(ActiveFaults("Power")));
      }
      else {
        log_warning("Health Monitor: Power is Inoperable due to non-local fault(s).");
      }
      PrevPower = false;
    }
    else if PowerOperable && !PrevPower {
      log_warning("Health Monitor: Power is now operable.");
      PrevPower = true;
    }
    endif;
  }
}
