// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// WARNING: This plan cannot work as intended until greater fault/action support
// is added to the simulator. This serves mostly as a syntactic example.

// DESIRED BEHAVIOR: If no faults are present, this plan will pan 180 degrees,
// unstow and then stow the arm. If a fault is injected, the plan will pause
// until resolution.

// LIMITATIONS: If an arm fault is triggered during Unstow, it will skip the Stow node.

// NOTE: If a fault is injected during an operation, that operation will only
// halt immediately if the fault injected is associated with it directly,
// i.e. an antenna fault during panning or an arm fault during
// unstowing or stowing.


#include "ow-interface.h"

FaultHandlingPattern3: UncheckedSequence
{
  Boolean PanSuccess;
  Boolean UnstowSuccess;
  Boolean StowSuccess;

  log_info ("Starting FaultHandlingPattern3 plan...");

  PanAntenna:
  {
    Start !Lookup(AntennaPanFault);
    Invariant !Lookup(AntennaPanFault);

    log_info ("Starting pan...");
    LibraryCall Pan (Degrees=180);
    log_info ("Finished pan.");
  }

  PanSuccess = PanAntenna.outcome == SUCCESS;

  Unstow:
  {
    Start !Lookup(ArmFault);
    Invariant !Lookup(ArmFault);

    log_info ("Starting unstow...");
    LibraryCall ArmUnstow();
    log_info ("Finished unstow.");
  }

  UnstowSuccess = Unstow.outcome == SUCCESS;

  Stow:
  {
    Start !Lookup(ArmFault);
    Invariant !Lookup(ArmFault);

    log_info ("Starting stow...");
    LibraryCall ArmStow();
    log_info ("Finished stow.");
  }

  StowSuccess = Stow.outcome == SUCCESS;

  log_info ("Outcomes (Pan, Unstow, Stow) = ",
            PanSuccess, UnstowSuccess, StowSuccess);
  log_info ("FaultHandlingPattern3 plan complete.");

}
