// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// Simplified version of the Europa Lander reference mission, Sol 0.  Performs
// the same operation sequence as ReferenceMission1.plp, adding stubbed
// operations that are found in the mission description, as well as partial
// support for crash recovery and plan persistence using PLEXIL's checkpointing
// facility.

#include "plexil_defs.h"
#include "plan-interface.h"

LibraryAction MonitorPower (In Boolean continue);
LibraryAction ImageLandingSite(In String InstanceName,
                               In Boolean IgnoreCrash);
LibraryAction InterogateSurface;
LibraryAction GetTrenchTarget;
LibraryAction Excavation;
LibraryAction Downlink;
LibraryAction Image (In String desc);
LibraryAction IdentifySampleTarget (InOut Real X,
                                    InOut Real Y,
                                    InOut Boolean Parallel,
                                    InOut Real GroundPos);
LibraryAction DigTrench (In Real X,
                         In Real Y,
                         In Real GroundPos,
                         In Real Length,
                         In Real BiteDepth,
                         In Integer NumPasses,
                         In Boolean Parallel);
LibraryAction CollectAndTransfer(In String InstanceName,
                                 In Boolean IgnoreCrash,
                                 In Real X, In Real Y,
                                 In Real GroundPos,
                                 In Real Depth, In Real Length,
                                 In Boolean Parallel);
LibraryAction RemoveTailings (In Real X,
                              In Real Y,
                              In Real GroundPos,
                              In Boolean Parallel);
LibraryAction StartSampleAnalysis;
LibraryAction Stub(In String desc);
LibraryAction DumpSamples;

EuropaMission: Concurrence
{
  Boolean MissionInProgress = true;
  Boolean DidCrash; // Unknown

  PowerMonitor: LibraryCall MonitorPower (continue = MissionInProgress);

  Mission:
  {
    // These 4 variables are assigned in the call to IdentifySampleTarget.
    Real trench_x, trench_y, ground_pos;
    Boolean parallel;

    // Max length possible is twice the radius of the arm/scoop (.48), i.e. .96.
    // However, the max value is generally not appropriate because the scoop
    // should not be inserted so deep into the ground.  Here, estimating a
    // reasonable value given the other trenching parameters used.
    Real trench_length = 0.6;

    Invariant MissionInProgress;

    log_info ("Starting Europa Mission, Sol 0 ...");
    DidCrash = Lookup(DidCrash);

    CrashHandle: UncheckedSequence
    {
      SkipCondition !DidCrash;

      OffloadData:
      {
        SkipCondition Lookup(NumberOfUnhandledBoots)<MAX_CRASHES;
        log_info("Recorded ", Lookup(NumberOfUnhandledBoots),
                 " crashes, likely indication of end-of-mission");
        OffloadAllData: LibraryCall Stub(desc="Offloading all data");
      }

      CommunicateCrash: LibraryCall Stub(desc="Informing Earth of crash");

      // Verify that onboard time is accurate, if possible
      VerifyTime:Try
      {
        EarthTime: LibraryCall Stub(desc="Verifying time with Earth");
        Brightness:
        LibraryCall Stub(desc="Roughly verifying time from ground brightness");
      }

      VerifyPosition: LibraryCall Stub(desc="Verifying lander position");
      VerifyHardware: LibraryCall Stub(desc="Verifying hardware integrity");
      VerifySoftware: LibraryCall Stub(desc="Verifying software integrity");
      RestArm: LibraryCall Stub(desc="Moving arm to safe position");
    }

    // Brief summary of checkpoint interface:
    //  - CheckpointWhen returns most recent boot with checkpoint, UNKNOWN if not
    //    found.
    //  - IsBootOK returns true if that boot was OK, UNKNOWN if not found.
    //
    // Thus the SkipCondition in the following nodes is true if and only if the
    // executive crashed and the last time the checkpoint was set, the executive
    // crashed.  This handles the case of multiple crashes.

    ImageLandingSite:
    {
      // TakePanorama__NAME__End is set by ImageLandingSite
      SkipCondition
        (DidCrash &&
         !Lookup(IsBootOK
                 (Lookup (CheckpointWhen ("TakePanorama__MissionSol1__End")))));
      LibraryCall ImageLandingSite (InstanceName = "MissionSol1",
                                    IgnoreCrash = false);
      SynchronousCommand flush_checkpoints();
    }

    UnstowArm:
    {
      SkipCondition
        (DidCrash && !Lookup(IsBootOK(Lookup(CheckpointWhen("ArmUnstowed")))));
      LibraryCall Unstow();
      set_checkpoint("ArmUnstowed");
      SynchronousCommand flush_checkpoints();
    }

    SampleCollection:
    {
      // This node includes all phases of sample collection, beginning with
      // finding sampling location and ending with delivering the sample to its
      // destination.

      // Note that this node is checkpointed as a single step, because data
      // needed to checkpoint the indivual steps (trench_x, trench_y,
      // ground_pos, parallel, and the GroundFound lookup) is not persistent.
      // In other words, there is no checkpointing within this node -- the
      // entire node would be repeated if a crash occurred during its execution.
      // Jira OW-657 is for making this plan fully interruptable.

      SkipCondition
        (DidCrash && !Lookup(IsBootOK(Lookup(CheckpointWhen("SampleCollected")))));

      // NOTE: this call has the side effect of setting the GroundFound external
      // variable, as well as the four variables passed in.
      LibraryCall IdentifySampleTarget (X = trench_x,
                                        Y = trench_y,
                                        GroundPos = ground_pos,
                                        Parallel = parallel);

      if (! Lookup(GroundFound)) {
        // Note that the default value of GroundFound is false, so
        log_error ("Failed to find ground. Stowing arm and stopping.");
        LibraryCall Stow();
        MissionInProgress = false;
      }

      DigAndImage: Concurrence {
        Boolean DiggingSafe = true;
        Dig:
        {
          InvariantCondition DiggingSafe;
          LibraryCall DigTrench (X = trench_x, Y = trench_y, GroundPos = ground_pos,
                                 Length = trench_length, BiteDepth = 0.05,
                                 NumPasses = 2, Parallel = parallel);
        }
        ImageDig:
        {
          Repeat Dig.state == EXECUTING;
          LibraryCall Image(desc="trench");
          Wait FILM_INTERVAL;
        }

        SenseDig:
        {
          Repeat Dig.state == EXECUTING;
          LibraryCall Stub (desc="Sensing dig");
          DiggingSafe = STUB_TRUE;
          Wait SENSE_DIG_INTERVAL;
        }
      }

      LibraryCall RemoveTailings (X = trench_x, Y = trench_y,
                                  GroundPos = ground_pos, Parallel = parallel);
      LibraryCall Image(desc="trench");
      LibraryCall Downlink;

      LibraryCall CollectAndTransfer(InstanceName="MissionSol1",
                                     IgnoreCrash = false,
                                     X = trench_x, Y = trench_y,
                                     GroundPos = ground_pos,
                                     Depth = 0.11, Length = trench_length,
                                     Parallel = parallel);
      set_checkpoint ("SampleCollected");
      SynchronousCommand flush_checkpoints();
    }

    SampleAnalysis:
    {
      SkipCondition
        (DidCrash && !Lookup(IsBootOK(Lookup(CheckpointWhen("SampleAnalyzed")))));
      LibraryCall StartSampleAnalysis;
      set_checkpoint("SampleAnalyzed");
      SynchronousCommand flush_checkpoints();
    }

    StowArm:
    {
      SkipCondition
        (DidCrash && !Lookup(IsBootOK(Lookup(CheckpointWhen("ArmStowed")))));
      LibraryCall Stow();
      set_checkpoint("ArmStowed");
      SynchronousCommand flush_checkpoints();
    }

    log_info ("Europa Mission, Sol 0 finished.");
    set_boot_ok();
    SynchronousCommand flush_checkpoints();
    MissionInProgress = false;
  }
}
